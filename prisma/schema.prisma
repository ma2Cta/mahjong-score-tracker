generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//////////// model 

model User {
  id            Int       @id @default(autoincrement())
  name          String
  sets          Set[]
  scores        Score[]
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Set {
  id        Int      @id @default(autoincrement())
  startAt   DateTime @default(now())
  location  String
  isThree   Boolean  @default(false)
  users     User[]
  games     Game[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Game {
  id          Int      @id @default(autoincrement())
  setId       Int
  set         Set      @relation(fields: [setId], references: [id])
  startAt     DateTime @default(now())
  roundLength Int      @default(1)
  rounds      Round[]
  basePoint   Int      @default(25000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Round {
  id          Int      @id @default(autoincrement())
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  round       Int      @default(1)
  wind        Int      @default(0)
  roundInWind Int      @default(0)
  scores      Score[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Score {
  id        Int      @id @default(autoincrement())
  roundId   Int
  round     Round    @relation(fields: [roundId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  point     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
